(defun sonar ()
  (interactive)
  (with-temp-buffer
    (goto-char (point-min))
    (insert-file-contents "c:/WS/src/adventofcode/dag1/input.txt")
    (goto-char (point-min))
    (let ((prev (number-at-point))
          (count 0)
          curr)
      (forward-line 1)
      (while (not (eq (point) (point-max)))
        (setq curr (number-at-point))
        (when (> curr prev)
          (setq count (1+ count)))
        (setq prev curr)
        (forward-line 1))
      (message "%d" count))))

(defun sonar3 ()
  (interactive)
  (with-temp-buffer
    (goto-char (point-min))
    (insert-file-contents "c:/WS/src/adventofcode/dag1/input.txt")
    (goto-char (point-min))
    (let ((siffra1 (string-to-number (buffer-substring (point-at-bol) (point-at-eol))))
          (siffra2 0)
          (siffra3 0)
          (summa1 0)
          (summa2 0)
          (count 0))
      (forward-line 1)
      (setq siffra2 (string-to-number (buffer-substring (point-at-bol) (point-at-eol))))
      (forward-line 1)
      (setq siffra3 (string-to-number (buffer-substring (point-at-bol) (point-at-eol))))
      (setq summa1 (+ siffra1 siffra2 siffra3))
      (forward-line 1)
      (while (not (eq (point) (point-max)))
        (setq siffra1 siffra2
              siffra2 siffra3)
        (setq siffra3 (string-to-number (buffer-substring (point-at-bol) (point-at-eol))))
        (setq summa2 (+ siffra1 siffra2 siffra3))
        (when (> summa2 summa1)
          (setq count (1+ count)))
        (setq summa1 summa2)
        (forward-line 1))
      (message "%d" count))))

(sonar)

(sonar3)
